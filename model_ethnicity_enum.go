/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// EthnicityEnum the model 'EthnicityEnum'
type EthnicityEnum string

// List of EthnicityEnum
const (
	ETHNICITYENUM_AMERICAN_INDIAN_OR_ALASKA_NATIVE EthnicityEnum = "AMERICAN_INDIAN_OR_ALASKA_NATIVE"
	ETHNICITYENUM_ASIAN_OR_INDIAN_SUBCONTINENT EthnicityEnum = "ASIAN_OR_INDIAN_SUBCONTINENT"
	ETHNICITYENUM_BLACK_OR_AFRICAN_AMERICAN EthnicityEnum = "BLACK_OR_AFRICAN_AMERICAN"
	ETHNICITYENUM_HISPANIC_OR_LATINO EthnicityEnum = "HISPANIC_OR_LATINO"
	ETHNICITYENUM_NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER EthnicityEnum = "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER"
	ETHNICITYENUM_TWO_OR_MORE_RACES EthnicityEnum = "TWO_OR_MORE_RACES"
	ETHNICITYENUM_WHITE EthnicityEnum = "WHITE"
	ETHNICITYENUM_PREFER_NOT_TO_DISCLOSE EthnicityEnum = "PREFER_NOT_TO_DISCLOSE"
)

func (v *EthnicityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EthnicityEnum(value)
	for _, existing := range []EthnicityEnum{ "AMERICAN_INDIAN_OR_ALASKA_NATIVE", "ASIAN_OR_INDIAN_SUBCONTINENT", "BLACK_OR_AFRICAN_AMERICAN", "HISPANIC_OR_LATINO", "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER", "TWO_OR_MORE_RACES", "WHITE", "PREFER_NOT_TO_DISCLOSE",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EthnicityEnum", value)
}

// Ptr returns reference to EthnicityEnum value
func (v EthnicityEnum) Ptr() *EthnicityEnum {
	return &v
}

type NullableEthnicityEnum struct {
	value *EthnicityEnum
	isSet bool
}

func (v NullableEthnicityEnum) Get() *EthnicityEnum {
	return v.value
}

func (v *NullableEthnicityEnum) Set(val *EthnicityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableEthnicityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableEthnicityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthnicityEnum(val *EthnicityEnum) *NullableEthnicityEnum {
	return &NullableEthnicityEnum{value: val, isSet: true}
}

func (v NullableEthnicityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthnicityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

