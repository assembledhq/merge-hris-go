/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// BenefitPlanTypeEnum the model 'BenefitPlanTypeEnum'
type BenefitPlanTypeEnum string

// List of BenefitPlanTypeEnum
const (
	MEDICAL BenefitPlanTypeEnum = "MEDICAL"
	DENTAL BenefitPlanTypeEnum = "DENTAL"
	VISION BenefitPlanTypeEnum = "VISION"
	HSA BenefitPlanTypeEnum = "HSA"
	FSA_MEDICAL BenefitPlanTypeEnum = "FSA_MEDICAL"
	FSA_DEPENDENT_CARE BenefitPlanTypeEnum = "FSA_DEPENDENT_CARE"
	SIMPLE_IRA BenefitPlanTypeEnum = "SIMPLE_IRA"
	_401_K BenefitPlanTypeEnum = "_401K"
	ROTH_401_K BenefitPlanTypeEnum = "ROTH_401K"
	OTHER_NON_TAXABLE BenefitPlanTypeEnum = "OTHER_NON_TAXABLE"
	COMMUTER_TRANSIT BenefitPlanTypeEnum = "COMMUTER_TRANSIT"
	COMMUTER_PARKING BenefitPlanTypeEnum = "COMMUTER_PARKING"
	_401_K_LOAN_PAYMENT BenefitPlanTypeEnum = "_401K_LOAN_PAYMENT"
	SHORT_DISABILITY BenefitPlanTypeEnum = "SHORT_DISABILITY"
	LONG_DISABILITY BenefitPlanTypeEnum = "LONG_DISABILITY"
	LIFE BenefitPlanTypeEnum = "LIFE"
	SEP_IRA BenefitPlanTypeEnum = "SEP_IRA"
	SARSEP BenefitPlanTypeEnum = "SARSEP"
	CUSTOM_TAXABLE BenefitPlanTypeEnum = "CUSTOM_TAXABLE"
	_403_B BenefitPlanTypeEnum = "_403B"
	ROTH_403_B BenefitPlanTypeEnum = "ROTH_403B"
	STUDENT_LOAN BenefitPlanTypeEnum = "STUDENT_LOAN"
)

func (v *BenefitPlanTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BenefitPlanTypeEnum(value)
	for _, existing := range []BenefitPlanTypeEnum{ "MEDICAL", "DENTAL", "VISION", "HSA", "FSA_MEDICAL", "FSA_DEPENDENT_CARE", "SIMPLE_IRA", "_401K", "ROTH_401K", "OTHER_NON_TAXABLE", "COMMUTER_TRANSIT", "COMMUTER_PARKING", "_401K_LOAN_PAYMENT", "SHORT_DISABILITY", "LONG_DISABILITY", "LIFE", "SEP_IRA", "SARSEP", "CUSTOM_TAXABLE", "_403B", "ROTH_403B", "STUDENT_LOAN",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BenefitPlanTypeEnum", value)
}

// Ptr returns reference to BenefitPlanTypeEnum value
func (v BenefitPlanTypeEnum) Ptr() *BenefitPlanTypeEnum {
	return &v
}

type NullableBenefitPlanTypeEnum struct {
	value *BenefitPlanTypeEnum
	isSet bool
}

func (v NullableBenefitPlanTypeEnum) Get() *BenefitPlanTypeEnum {
	return v.value
}

func (v *NullableBenefitPlanTypeEnum) Set(val *BenefitPlanTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableBenefitPlanTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableBenefitPlanTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenefitPlanTypeEnum(val *BenefitPlanTypeEnum) *NullableBenefitPlanTypeEnum {
	return &NullableBenefitPlanTypeEnum{value: val, isSet: true}
}

func (v NullableBenefitPlanTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenefitPlanTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

