/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// StateEnum the model 'StateEnum'
type StateEnum string

// List of StateEnum
const (
	AL StateEnum = "AL"
	AK StateEnum = "AK"
	AS StateEnum = "AS"
	AZ StateEnum = "AZ"
	AR StateEnum = "AR"
	AA StateEnum = "AA"
	AE StateEnum = "AE"
	AP StateEnum = "AP"
	CA StateEnum = "CA"
	CO StateEnum = "CO"
	CT StateEnum = "CT"
	DE StateEnum = "DE"
	DC StateEnum = "DC"
	FL StateEnum = "FL"
	GA StateEnum = "GA"
	GU StateEnum = "GU"
	HI StateEnum = "HI"
	ID StateEnum = "ID"
	IL StateEnum = "IL"
	IN StateEnum = "IN"
	IA StateEnum = "IA"
	KS StateEnum = "KS"
	KY StateEnum = "KY"
	LA StateEnum = "LA"
	ME StateEnum = "ME"
	MD StateEnum = "MD"
	MA StateEnum = "MA"
	MI StateEnum = "MI"
	MN StateEnum = "MN"
	MS StateEnum = "MS"
	MO StateEnum = "MO"
	MT StateEnum = "MT"
	NE StateEnum = "NE"
	NV StateEnum = "NV"
	NH StateEnum = "NH"
	NJ StateEnum = "NJ"
	NM StateEnum = "NM"
	NY StateEnum = "NY"
	NC StateEnum = "NC"
	ND StateEnum = "ND"
	MP StateEnum = "MP"
	OH StateEnum = "OH"
	OK StateEnum = "OK"
	OR StateEnum = "OR"
	PA StateEnum = "PA"
	PR StateEnum = "PR"
	RI StateEnum = "RI"
	SC StateEnum = "SC"
	SD StateEnum = "SD"
	TN StateEnum = "TN"
	TX StateEnum = "TX"
	UT StateEnum = "UT"
	VT StateEnum = "VT"
	VI StateEnum = "VI"
	VA StateEnum = "VA"
	WA StateEnum = "WA"
	WV StateEnum = "WV"
	WI StateEnum = "WI"
	WY StateEnum = "WY"
)

func (v *StateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StateEnum(value)
	for _, existing := range []StateEnum{ "AL", "AK", "AS", "AZ", "AR", "AA", "AE", "AP", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "MP", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VI", "VA", "WA", "WV", "WI", "WY",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StateEnum", value)
}

// Ptr returns reference to StateEnum value
func (v StateEnum) Ptr() *StateEnum {
	return &v
}

type NullableStateEnum struct {
	value *StateEnum
	isSet bool
}

func (v NullableStateEnum) Get() *StateEnum {
	return v.value
}

func (v *NullableStateEnum) Set(val *StateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateEnum(val *StateEnum) *NullableStateEnum {
	return &NullableStateEnum{value: val, isSet: true}
}

func (v NullableStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

