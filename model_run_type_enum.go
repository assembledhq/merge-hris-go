/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
	"fmt"
)

// RunTypeEnum the model 'RunTypeEnum'
type RunTypeEnum string

// List of RunTypeEnum
const (
	RUNTYPEENUM_INIT RunTypeEnum = "INIT"
	RUNTYPEENUM_REGULAR RunTypeEnum = "REGULAR"
	RUNTYPEENUM_OFF_CYCLE RunTypeEnum = "OFF_CYCLE"
	RUNTYPEENUM_CORRECTION RunTypeEnum = "CORRECTION"
	RUNTYPEENUM_TERMINATION RunTypeEnum = "TERMINATION"
	RUNTYPEENUM_RECONCILIATION RunTypeEnum = "RECONCILIATION"
	RUNTYPEENUM_NEW_HIRE RunTypeEnum = "NEW_HIRE"
	RUNTYPEENUM_POP RunTypeEnum = "POP"
	RUNTYPEENUM_TRANSITION RunTypeEnum = "TRANSITION"
	RUNTYPEENUM_CORRECTION_DISPLAY RunTypeEnum = "CORRECTION_DISPLAY"
	RUNTYPEENUM_EXCESS_HOURS RunTypeEnum = "EXCESS_HOURS"
	RUNTYPEENUM_SIGN_ON_BONUS RunTypeEnum = "SIGN_ON_BONUS"
	RUNTYPEENUM_S_CORP RunTypeEnum = "S_CORP"
	RUNTYPEENUM_FRINGE_BENEFITS RunTypeEnum = "FRINGE_BENEFITS"
	RUNTYPEENUM_CONTRACTOR_LATE_PAYMENTS RunTypeEnum = "CONTRACTOR_LATE_PAYMENTS"
)

func (v *RunTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RunTypeEnum(value)
	for _, existing := range []RunTypeEnum{ "INIT", "REGULAR", "OFF_CYCLE", "CORRECTION", "TERMINATION", "RECONCILIATION", "NEW_HIRE", "POP", "TRANSITION", "CORRECTION_DISPLAY", "EXCESS_HOURS", "SIGN_ON_BONUS", "S_CORP", "FRINGE_BENEFITS", "CONTRACTOR_LATE_PAYMENTS",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunTypeEnum", value)
}

// Ptr returns reference to RunTypeEnum value
func (v RunTypeEnum) Ptr() *RunTypeEnum {
	return &v
}

type NullableRunTypeEnum struct {
	value *RunTypeEnum
	isSet bool
}

func (v NullableRunTypeEnum) Get() *RunTypeEnum {
	return v.value
}

func (v *NullableRunTypeEnum) Set(val *RunTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRunTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRunTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunTypeEnum(val *RunTypeEnum) *NullableRunTypeEnum {
	return &NullableRunTypeEnum{value: val, isSet: true}
}

func (v NullableRunTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

