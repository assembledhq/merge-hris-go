/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// IgnoreCommonModel struct for IgnoreCommonModel
type IgnoreCommonModel struct {
	Reason ReasonEnum `json:"reason"`
	Message *string `json:"message,omitempty"`
    // raw json response by property name
    responseRaw map[string]json.RawMessage `json:"-"`
}

// NewIgnoreCommonModel instantiates a new IgnoreCommonModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIgnoreCommonModel(reason ReasonEnum) *IgnoreCommonModel {
	this := IgnoreCommonModel{}
	this.Reason = reason
	return &this
}

// NewIgnoreCommonModelWithDefaults instantiates a new IgnoreCommonModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIgnoreCommonModelWithDefaults() *IgnoreCommonModel {
	this := IgnoreCommonModel{}
	return &this
}

// GetReason returns the Reason field value
func (o *IgnoreCommonModel) GetReason() ReasonEnum {
	if o == nil {
		var ret ReasonEnum
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *IgnoreCommonModel) GetReasonOk() (*ReasonEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *IgnoreCommonModel) SetReason(v ReasonEnum) {
	o.Reason = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *IgnoreCommonModel) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IgnoreCommonModel) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *IgnoreCommonModel) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *IgnoreCommonModel) SetMessage(v string) {
	o.Message = &v
}

func (o IgnoreCommonModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

func (v *IgnoreCommonModel) UnmarshalJSON(src []byte) error {
    type IgnoreCommonModelUnmarshalTarget IgnoreCommonModel

	var intermediateResult IgnoreCommonModelUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.responseRaw)
	if err2 != nil {
		return err2
	}

	*v = IgnoreCommonModel(intermediateResult)
	return nil
}
type NullableIgnoreCommonModel struct {
	value *IgnoreCommonModel
	isSet bool
}

func (v NullableIgnoreCommonModel) Get() *IgnoreCommonModel {
	return v.value
}

func (v *NullableIgnoreCommonModel) Set(val *IgnoreCommonModel) {
	v.value = val
	v.isSet = true
}

func (v NullableIgnoreCommonModel) IsSet() bool {
	return v.isSet
}

func (v *NullableIgnoreCommonModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIgnoreCommonModel(val *IgnoreCommonModel) *NullableIgnoreCommonModel {
	return &NullableIgnoreCommonModel{value: val, isSet: true}
}

func (v NullableIgnoreCommonModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIgnoreCommonModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.responseRaw)
}


