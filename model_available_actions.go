/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// AvailableActions struct for AvailableActions
type AvailableActions struct {
	ModelName string `json:"model_name"`
	AvailableOperations []string `json:"available_operations"`
}

// NewAvailableActions instantiates a new AvailableActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableActions(modelName string, availableOperations []string, ) *AvailableActions {
	this := AvailableActions{}
	this.ModelName = modelName
	this.AvailableOperations = availableOperations
	return &this
}

// NewAvailableActionsWithDefaults instantiates a new AvailableActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableActionsWithDefaults() *AvailableActions {
	this := AvailableActions{}
	return &this
}

// GetModelName returns the ModelName field value
func (o *AvailableActions) GetModelName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value
// and a boolean to check if the value has been set.
func (o *AvailableActions) GetModelNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ModelName, true
}

// SetModelName sets field value
func (o *AvailableActions) SetModelName(v string) {
	o.ModelName = v
}

// GetAvailableOperations returns the AvailableOperations field value
func (o *AvailableActions) GetAvailableOperations() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.AvailableOperations
}

// GetAvailableOperationsOk returns a tuple with the AvailableOperations field value
// and a boolean to check if the value has been set.
func (o *AvailableActions) GetAvailableOperationsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AvailableOperations, true
}

// SetAvailableOperations sets field value
func (o *AvailableActions) SetAvailableOperations(v []string) {
	o.AvailableOperations = v
}

func (o AvailableActions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["model_name"] = o.ModelName
	}
	if true {
		toSerialize["available_operations"] = o.AvailableOperations
	}
	return json.Marshal(toSerialize)
}

type NullableAvailableActions struct {
	value *AvailableActions
	isSet bool
}

func (v NullableAvailableActions) Get() *AvailableActions {
	return v.value
}

func (v *NullableAvailableActions) Set(val *AvailableActions) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableActions) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableActions(val *AvailableActions) *NullableAvailableActions {
	return &NullableAvailableActions{value: val, isSet: true}
}

func (v NullableAvailableActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


