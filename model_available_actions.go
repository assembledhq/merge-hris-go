/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// AvailableActions struct for AvailableActions
type AvailableActions struct {
	AvailableModelOperations *[]ModelOperation `json:"available_model_operations,omitempty"`
}

// NewAvailableActions instantiates a new AvailableActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableActions() *AvailableActions {
	this := AvailableActions{}
	return &this
}

// NewAvailableActionsWithDefaults instantiates a new AvailableActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableActionsWithDefaults() *AvailableActions {
	this := AvailableActions{}
	return &this
}

// GetAvailableModelOperations returns the AvailableModelOperations field value if set, zero value otherwise.
func (o *AvailableActions) GetAvailableModelOperations() []ModelOperation {
	if o == nil || o.AvailableModelOperations == nil {
		var ret []ModelOperation
		return ret
	}
	return *o.AvailableModelOperations
}

// GetAvailableModelOperationsOk returns a tuple with the AvailableModelOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableActions) GetAvailableModelOperationsOk() (*[]ModelOperation, bool) {
	if o == nil || o.AvailableModelOperations == nil {
		return nil, false
	}
	return o.AvailableModelOperations, true
}

// HasAvailableModelOperations returns a boolean if a field has been set.
func (o *AvailableActions) HasAvailableModelOperations() bool {
	if o != nil && o.AvailableModelOperations != nil {
		return true
	}

	return false
}

// SetAvailableModelOperations gets a reference to the given []ModelOperation and assigns it to the AvailableModelOperations field.
func (o *AvailableActions) SetAvailableModelOperations(v []ModelOperation) {
	o.AvailableModelOperations = &v
}

func (o AvailableActions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvailableModelOperations != nil {
		toSerialize["available_model_operations"] = o.AvailableModelOperations
	}
	return json.Marshal(toSerialize)
}

type NullableAvailableActions struct {
	value *AvailableActions
	isSet bool
}

func (v NullableAvailableActions) Get() *AvailableActions {
	return v.value
}

func (v *NullableAvailableActions) Set(val *AvailableActions) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableActions) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableActions(val *AvailableActions) *NullableAvailableActions {
	return &NullableAvailableActions{value: val, isSet: true}
}

func (v NullableAvailableActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


