/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_hris_client

import (
	"encoding/json"
)

// EndUserDetails struct for EndUserDetails
type EndUserDetails struct {
	EndUserEmailAddress string `json:"end_user_email_address"`
	EndUserOrganizationName string `json:"end_user_organization_name"`
	EndUserOriginId string `json:"end_user_origin_id"`
	Categories []string `json:"categories"`
}

// NewEndUserDetails instantiates a new EndUserDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndUserDetails(endUserEmailAddress string, endUserOrganizationName string, endUserOriginId string, categories []string, ) *EndUserDetails {
	this := EndUserDetails{}
	this.EndUserEmailAddress = endUserEmailAddress
	this.EndUserOrganizationName = endUserOrganizationName
	this.EndUserOriginId = endUserOriginId
	this.Categories = categories
	return &this
}

// NewEndUserDetailsWithDefaults instantiates a new EndUserDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndUserDetailsWithDefaults() *EndUserDetails {
	this := EndUserDetails{}
	return &this
}

// GetEndUserEmailAddress returns the EndUserEmailAddress field value
func (o *EndUserDetails) GetEndUserEmailAddress() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EndUserEmailAddress
}

// GetEndUserEmailAddressOk returns a tuple with the EndUserEmailAddress field value
// and a boolean to check if the value has been set.
func (o *EndUserDetails) GetEndUserEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndUserEmailAddress, true
}

// SetEndUserEmailAddress sets field value
func (o *EndUserDetails) SetEndUserEmailAddress(v string) {
	o.EndUserEmailAddress = v
}

// GetEndUserOrganizationName returns the EndUserOrganizationName field value
func (o *EndUserDetails) GetEndUserOrganizationName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EndUserOrganizationName
}

// GetEndUserOrganizationNameOk returns a tuple with the EndUserOrganizationName field value
// and a boolean to check if the value has been set.
func (o *EndUserDetails) GetEndUserOrganizationNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndUserOrganizationName, true
}

// SetEndUserOrganizationName sets field value
func (o *EndUserDetails) SetEndUserOrganizationName(v string) {
	o.EndUserOrganizationName = v
}

// GetEndUserOriginId returns the EndUserOriginId field value
func (o *EndUserDetails) GetEndUserOriginId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EndUserOriginId
}

// GetEndUserOriginIdOk returns a tuple with the EndUserOriginId field value
// and a boolean to check if the value has been set.
func (o *EndUserDetails) GetEndUserOriginIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndUserOriginId, true
}

// SetEndUserOriginId sets field value
func (o *EndUserDetails) SetEndUserOriginId(v string) {
	o.EndUserOriginId = v
}

// GetCategories returns the Categories field value
func (o *EndUserDetails) GetCategories() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *EndUserDetails) GetCategoriesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Categories, true
}

// SetCategories sets field value
func (o *EndUserDetails) SetCategories(v []string) {
	o.Categories = v
}

func (o EndUserDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["end_user_email_address"] = o.EndUserEmailAddress
	}
	if true {
		toSerialize["end_user_organization_name"] = o.EndUserOrganizationName
	}
	if true {
		toSerialize["end_user_origin_id"] = o.EndUserOriginId
	}
	if true {
		toSerialize["categories"] = o.Categories
	}
	return json.Marshal(toSerialize)
}

type NullableEndUserDetails struct {
	value *EndUserDetails
	isSet bool
}

func (v NullableEndUserDetails) Get() *EndUserDetails {
	return v.value
}

func (v *NullableEndUserDetails) Set(val *EndUserDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEndUserDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEndUserDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndUserDetails(val *EndUserDetails) *NullableEndUserDetails {
	return &NullableEndUserDetails{value: val, isSet: true}
}

func (v NullableEndUserDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndUserDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


